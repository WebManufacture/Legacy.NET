<!DOCTYPE html>
<html>
	<head>
		<title>CNC Table</title>
		<meta content="text/html; charset=utf-8" http-equiv="Content-Type">
		<link type='text/css' rel='stylesheet' href="http://services.web-manufacture.net/Styles/System.default.css" />
		<link type='text/css' rel='stylesheet' href="CncTable.css" />
		<script type="text/javascript" src="http://services.web-manufacture.net/Base/v1.3/Utils.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/DOM.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Events.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Log.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Url.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Ajax.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Jasp.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Modules.js"></script>
		<script type="text/javascript" src="http://Services.web-manufacture.net/Base/v1.3/Net.js"></script>
		<script type='text/javascript' src='CncTable.js' class='reloadable'></script>
		<script type='text/javascript' class='reloadable'>
		    CNC = {};

		    CNC.Init = function() {
		        L.debug = true;
		        CNC.log = L.Log;
		        CNC.id = "CNC";
		        Storage = Net.GetTunnel("/storage/cnc_table");
		        Net = Net.GetTunnel("http://dfc-server/CncTable/");
		        logDiv = DOM("#LogBar");
		        CNC.startDate = new Date();
		        CNC.State = DOM("#StatusBar");
		        CNC.State.InnerProperty("X", "#xCoord");
		        CNC.State.InnerProperty("Y", "#yCoord");
		        CNC.State.InnerProperty("Z", "#zCoord");
		        CNC.State.AttrInnerProperty("Prog", "#progCommand");
		        CNC.State.AttrInnerProperty("Line", "#progLine");
		        WS.Body.AttrProperty("state");
		        CNC.ProgramRunned = false;
		        CNC.DebugMode = false;
		        CNC.ProgramCode;
		        CNC.GetState();
		        CNC.Load();
		    };


		    logger = function(type) {
		        //L.Info( "CNC")
		        var li = DOM("#ProgramLog").div(".log");
		        DOM("#ProgramLog").ins(li);
		        li.div(".item.log-time", (new Date()).formatTime(true));
		        for (var i = 0; i < arguments.length; i++) {
		            var text = arguments[i];
		            if (typeof (text) == "object") {
		                text = JSON.stringify(text);
		            }
		            li.div(".item", text + "");
		        }
		    }

		    logger.Clear = function() {
		        DOM("#ProgramLog").clear();
		    }

		    CNC.Commands = ["unknown", "go", "rebase", "stop", "info", "P"];
		    CNC.CommandsShort = ["U", "G", "R", "S", "I", "P"];
		    CNC.GCommands = { "Z": 1, "G": 1, "S": 3, "R": 2, "I": 4, "P": 100 };

		    /*
		    public byte command;
		    public ushort? x;
		    public ushort? y;
		    public ushort? z;
		    public ushort? speed;
		    public int? programLine;
		    */

		    CNC.GetProgram = function() {
		        var url = new Url("http://dfc-server/CncTable/State.ashx");
		        if (CNC.lastpoll) {
		            url.addParam("lastdate", CNC.lastpoll);
		        }
		        if (CNC.ProgramRunned) {
		            url.addParam("wait", "true");
		            url.addParam("ping", "true");
		        }
		        Net.get(url, CNC.StateReturned);
		    };


		    CNC.Load = function() {
		        Storage.get("", function(result) {
		            if (this.status == 200) {
		                DOM("#programText").value = result;
		            }
		        });
		    };

		    CNC.Save = function() {
		        Storage.add("", DOM("#programText").value, 28);
		    };

		    CNC.GetState = function() {
		        var url = new Url("http://dfc-server/CncTable/State.ashx");
		        url.addParam("rnd", Math.random());
		        /*if (CNC.lastpoll) {
		        url.addParam("lastdate", CNC.lastpoll);
		        }*/
		        /*
		        if (CNC.ProgramRunned) {
		        url.addParam("wait", "true");
		        url.addParam("ping", "true");
		        }
		        */
		        lastStateChar = 0;
		        var rq = Net.get(url);
		        rq.onreadystatechange = CNC.StateReturned;
		        rq.send();
		    };

		    CNC.StateReturned = function() {
		        if (this.readyState == 3) {
		            var result = this.responseText.substr(lastStateChar);
		            lastStateChar = this.responseText.length;

		            if (result && result.length > 0 && this.status == 200) {
		                result = JSON.parse(result);
		                for (var i = 0; i < result.length; i++) {
		                    var message = result[i];
		                    if (message.type == "state") {
		                        CNC.LastState = message;
		                        CNC.State.X = message.x;
		                        CNC.State.Y = message.y;
		                        CNC.State.Z = message.z;
		                        lx = message.x;
		                        ly = message.y;
		                        lz = message.z;
		                        if (parseInt(message.state) != 1) {
		                            commandRunning = false;
		                            CNC.log("Device", message);
		                        }
		                        else {
		                            if (!commandRunning) {
		                                CNC.log("Device", message);
		                                commandRunning = true;
		                            }
		                        }
		                    }
		                    if (message.type == "out-command") {
		                        CNC.LastCommand = message;
		                        CNC.State.Prog = CNC.Commands[message.command];
		                        CNC.ProgramRunned = !isNaN(parseInt(message.programLine));
		                        CNC.State.Line = message.programLine;
		                        if (!isNaN(parseInt(message.x))) {
		                            if (!CNC.LastState || message.x == CNC.LastState.x) {
		                                CNC.State.Prog += " x " + message.x;
		                            } else {
		                                CNC.State.Prog += " x->" + message.x;
		                            }
		                        }
		                        if (!isNaN(parseInt(message.y))) {
		                            if (!CNC.LastState || message.y == CNC.LastState.y) {
		                                CNC.State.Prog += " y " + message.y;
		                            } else {
		                                CNC.State.Prog += " y->" + message.y;
		                            }
		                        }
		                        if (!isNaN(parseInt(message.z))) {
		                            if (!CNC.LastState || message.z == CNC.LastState.z) {
		                                CNC.State.Prog += " z " + message.z;
		                            } else {
		                                CNC.State.Prog += " z->" + message.z;
		                            }
		                        }
		                        CNC.log("Command", message);
		                    }
		                    if (message.type == "program-state") {
		                        CNC.ProgramRunned = message.state == "Running";
		                        CNC.ProgramState = message.state;
		                        WS.Body.set("@state", message.state);
		                        CNC.log("Program", message);
		                    }
		                }
		            }
		        }
		        if (this.readyState == 4) {
		            if (CNC.ProgramRunned) {
		                window.setTimeout(CNC.GetState, 500);
		            } else {
		                window.setTimeout(CNC.GetState, 2000);
		            }
		        }
		    };

		    CNC.Command = function(str, callback) {
		        WS.Body.add(".busy");
		        if (typeof (str) != "string") {
		            str = JSON.stringify(str);
		        }
		        Net.add("Command.ashx?rnd=" + Math.random(), str, CNC.CommandComplete);
		    };

		    CNC.ProgCommand = function(str, callback) {
		        WS.Body.add(".busy");
		        if (typeof (str) == "string") {
		            Net.get("Program.ashx?rnd=" + Math.random() + "&command=" + str + (CNC.DebugMode ? "&debug=true" : ""), CNC.CommandComplete);
		        }
		    };

		    CNC.SendProgram = function(str) {
		        WS.Body.add(".busy");
		        if (typeof (str) == "string") {
		            Net.add("Program.ashx?rnd=" + Math.random() + (CNC.DebugMode ? "&debug=true" : ""), str, CNC.CommandComplete);
		        }
		    };

		    CNC.CommandComplete = function() {
		        WS.Body.del(".busy");
		    };

		    CNC.Go = function(x, y, z) {
		        CNC.Command({ command: 1, x: x, y: y, z: z, speed: 3000 });
		    };

		    CNC.Rebase = function(x, y, z) {
		        CNC.Command({ command: 2, x: x, y: y, z: z, speed: 0 });
		    };

		    CNC.SetDebugMode = function() {
		        CNC.DebugMode = !CNC.DebugMode;
		        if (CNC.DebugMode) {
		            CNC.ProgCommand("pause");
		        }
		    };

		    CNC.GetCircleProg = function(res, x, y, r, back, lastspeed) {
		        for (var angle = 0; angle <= 2 * Math.PI; angle += Math.PI / 32) {
		            var xcoord = Math.round(r * Math.cos(angle)) + x;
		            var ycoord = Math.round(r * Math.sin(angle)) + y;
		            var obj = { command: CNC.GCommands["G"], x: xcoord, y: ycoord, speed: lastspeed };
		            res.push(obj);
		        }
		        if (back == "back") {
		            var obj = { command: CNC.GCommands["G"], x: x, y: y, speed: lastspeed };
		            res.push(obj);
		        }
		    };

		    CNC.GetLoopProg = function(res, loop, comms, lxx, lyy, lzz) {
		        if (!loop || !comms || comms.length <= 0) return;
		        loop = loop.split(" ");
		        var start = parseInt(loop[1]);
		        var stop = parseInt(loop[2]);
		        var step = parseInt(loop[3]);
		        if (isNaN(step)) step = 1;
		        for (var i = start; i <= stop; i += step) {
		            for (var j = 0; j < comms.length; j++) {
		                var txt = comms[j].split(" ");
		                if (txt[0] == "C") {
		                    CNC.GetCircleProg(res, lxx, lyy, parseParam(txt[1], i), txt[2], speed);
		                    if (res.length > 0) {
		                        lxx = res[res.length - 1].x;
		                        lyy = res[res.length - 1].y;
		                    }
		                    continue;
		                }
		                if (txt[0] == "Z") {
		                    lzz = parseParam(txt[1], i, lzz);
		                    var speed = 0;
		                    if (txt[2]) speed = parseParam(txt[2], i);
		                    var obj = { command: CNC.GCommands[txt[0]], x: lxx, y: lyy, z: lzz, speed: speed };
		                    res.push(obj);
		                    continue;
		                }
		                if (txt[0] == "G") {
		                    //var speed = 0x1015;
		                    var speed = 0;
		                    if (txt[3]) speed = parseParam(txt[3], i);
		                    lxx = parseParam(txt[1], 0, lxx);
		                    lyy = parseParam(txt[2], 0, lyy);
		                    var obj = { command: CNC.GCommands[txt[0]], x: lxx, y: lyy, z: lzz, speed: speed };
		                    res.push(obj);
		                }
		            }
		        }
		    };

		    parseParam = function(param, i, last) {
		        if (!param || param == "") return null;
		        if (!param.start("+") && !param.start("-")) {
		            last = null;
		        }
		        else {
		            if (param.start("-")) var sign = -1;
		            else var sign = 1;
		            param = param.substring(1);
		        }
		        var int = parseInt(param);
		        if (!isNaN(int)) {
		            if (last) {
		                int = last + sign * int;
		            }
		            return int;
		        }
		        if (param.search(/\(\d+\)/) == 0) {
		            var paramNum = parseInt(param.match(/\d+/)[0]);
		            var int = parseInt(i);
		            if (!isNaN(int)) {
		                if (last) {
		                    int = last + sign * int;
		                }
		                return int;
		            }
		            return i;
		        }
		        return param;
		    };

		    parseNum = function(param, param1, param2, param3) {
		        if (!param || param == "") return null;
		        var int = parseInt(param);
		        if (!isNaN(int)) return int;
		        if (param.search(/\(\d+\)/) == 0) {
		            var paramNum = parseInt(param.match(/\d+/)[0]);
		            return arguments[paramNum + 1];
		        }
		        return param;
		    };

		    CNC.CompileProgram = function(text) {
		        lx = parseInt(CNC.State.X);
		        ly = parseInt(CNC.State.Y);
		        lz = parseInt(CNC.State.Z);
		        text = text.split("\n");
		        var result = [];
		        try {
		            for (var i = 0; i < text.length; i++) {
		                var lr = result[result.length - 1];
		                if (lr) {
		                    if (lr.x != undefined) {
		                        lx = parseInt(result[result.length - 1].x);
		                    }
		                    if (lr.y != undefined) {
		                        ly = parseInt(result[result.length - 1].y);
		                    }
		                    if (lr.z != undefined) {
		                        lz = parseInt(result[result.length - 1].z);
		                    }
		                }
		                var line = text[i].trim();
		                if (line.length == 0) break;
		                if (line.start("//")) continue;
		                var txt = line.split(" ");
		                if (txt[0] == "C") {
		                    CNC.GetCircleProg(result, lx, ly, parseInt(txt[1]), txt[2], speed);
		                    continue;
		                }
		                if (txt[0] == "L") {
		                    var comms = [];
		                    for (var j = i + 1; j < text.length; j++) {
		                        if (text[j]) {
		                            if (text[j] == "LF") break;
		                            comms.push(text[j]);
		                        }
		                        else {
		                            j = j - 1;
		                            break;
		                        }
		                    }
		                    if (comms.length > 0) {
		                        CNC.GetLoopProg(result, text[i], comms, lx, ly, lz);
		                        i = j;
		                    }
		                    continue;
		                }
		                if (txt[0] == "Z") {
		                    lz = parseParam(txt[1], i, lz);
		                    var speed = 0;
		                    if (txt[2]) speed = parseParam(txt[2], i);
		                    var obj = { command: CNC.GCommands[txt[0]], x: lx, y: ly, z: lz, speed: speed };
		                    result.push(obj);
		                    continue;
		                }
		                if (txt[0] == "G") {
		                    var speed = 0;
		                    if (txt[3]) speed = parseParam(txt[3], 0, 0);
		                    var obj = { command: CNC.GCommands[txt[0]], x: parseParam(txt[1], 0, lx), y: parseParam(txt[2], 0, ly), z: lz, speed: speed };
		                    result.push(obj);
		                }
		                if (txt[0] == "R") {
		                    var obj = { command: CNC.GCommands[txt[0]], x: parseParam(txt[1], 0, lx), y: parseParam(txt[2], 0, ly), z: parseParam(txt[3], 0, lz) };
		                    result.push(obj);
		                }

		                if (txt[0] == "P") {
		                    var obj = { command: CNC.GCommands[txt[0]] };
		                    result.push(obj);
		                }
		            }
		            return result;
		        }
		        catch (e) {
		            WS.Body.state = "error";
		            throw e;
		        }
		    };

		    CNC.ShowProgram = function() {
		        CNC.Save();
		        var lxx = parseInt(CNC.State.X);
		        var lyy = parseInt(CNC.State.Y);
		        var lzz = parseInt(CNC.State.Z);
		        var lss = 0;
		        var canv = DOM("#prewiewer");
		        canv.height = canv.width;
		        canv.width = canv.height;
		        var dc = canv.getContext("2d");
		        var zx = 100;
		        var zy = 100;
		        var cx = lxx / zx;
		        var cy = lyy / zy;
		        dc.beginPath();
		        dc.moveTo(cx, cy);
		        dc.rect(cx - 5, cy - 5, 10, 10);
		        dc.lineWidth = 1;
		        dc.strokeStyle = "#F0F";
		        dc.closePath();
		        dc.stroke();
		        CNC.ProgramCode = CNC.CompileProgram(DOM("#programText").value);
		        var ln = DOM("#codeLineNums");
		        var pr = DOM("#ProgramResult");
		        ln.clear();
		        pr.clear();
		        pr.del(".error");
		        var maxX = 0;
		        var maxY = 0;
		        var minX = 65535;
		        var minY = 65535;
		        var dl = pr.div(".descr-line");
		        //WS.Body.state = "compiling";
		        try {
		            dc.beginPath();
		            dc.strokeStyle = "#0F0";
		            for (var i = 0; i < CNC.ProgramCode.length; i++) {
		                var line = CNC.ProgramCode[i];
		                if (!line) {
		                    continue;
		                }
		                ln.div(".line-num", i).add("@num", i);
		                var pl = pr.div(".prog-line");
		                pl.div(".code-elem.command." + CNC.Commands[line.command], CNC.CommandsShort[line.command]);
		                var oc = { x: lxx, y: lyy, z: lzz };
		                pl.add(CNC.ShowCoord(line, "x", oc));
		                pl.add(CNC.ShowCoord(line, "y", oc));
		                pl.add(CNC.ShowCoord(line, "z", oc));
		                pl.div(".code-elem.speed", line.speed ? line.speed : "(" + lss + ")");
		                if (line.command == 1 && (line.x < 0 || line.y < 0 || line.z < 0)) {
		                    pl.add(".error");
		                    ln.add(".error");
		                    pr.add(".error");
		                    //WS.Body.state = "compile-error";
		                    CNC.ProgramCode = null;
		                    break;
		                }
		                if (line.command == 1 && (line.x > 65535 || line.y > 65535 || line.z > 65535)) {
		                    pl.add(".error");
		                    ln.add(".error");
		                    pr.add(".error");
		                    //WS.Body.state = "compile-error";
		                    CNC.ProgramCode = null;
		                    break;
		                }
		                if (line.command == 1 && line.speed && (line.speed < 0 || line.speed > 65535)) {
		                    pl.add(".error");
		                    ln.add(".error");
		                    pr.add(".error");
		                    //WS.Body.state = "compile-error";
		                    CNC.ProgramCode = null;
		                    break;
		                }
		                pl.line = line; /*
			if ((lxx < 6000 || lyy < 6000) && ((line.speed < 8000 && line.speed > 0) || (lss < 8000 && lss > 0))){
				pl.add(".warning");
				if (lxx < 6000){
					if (lyy < 6000){
						line.speed = 8000;	
					}
					else{
						var k = line.x/line.y;
						var newLine = JSON.parse(JSON.stringify(line));
						newLine.x = 6000;
						newLine.y = 6000 * k;
						newLine.speed = 8000;
						if (line.speed == 0) line.speed = lss;
						CNC.ProgramCode.splice(i,0,newLine);						
					}
				}
				else{
					var k = line.y/line.x;
					var newLine = JSON.parse(JSON.stringify(line));
					newLine.x = 6000 * k;
					newLine.y = 6000;
					newLine.speed = 8000;
					if (line.speed == 0) line.speed = lss;
					CNC.ProgramCode.splice(i,0,newLine);						
				}
			}
			else
			{
				if ((line.x < 6000 || line.y < 6000) && ((line.speed < 8000 && line.speed > 0) || (lss < 8000 && lss > 0))){
					pl.add(".warning");	
					if (line.x < 6000){
						if (lx < 6000){
							line.speed = 8000;	
						}
						else{
							var k = Math.abs((line.x - lx)/(line.y - ly));
							var newLine = JSON.parse(JSON.stringify(line));
							newLine.x = 6000;
							newLine.y = 6000 * k;
							newLine.speed = 8000;
							if (line.speed == 0) line.speed = lss;
							CNC.ProgramCode.splice(i,0,newLine);						
						}
					}
					else{
						if (ly < 6000){
							line.speed = 8000;	
						}
						else{
						var k = line.y/line.x;
						var newLine = JSON.parse(JSON.stringify(line));
						newLine.x = 6000 * k;
						newLine.y = 6000;
						newLine.speed = 8000;
						if (line.speed == 0) line.speed = lss;
						CNC.ProgramCode.splice(i,0,newLine);
						}
					}
				}	
			}*/
		                if (line.z === undefined) line.z = lzz;
		                lxx = line.x;
		                lyy = line.y;
		                lzz = line.z;
		                if (lxx > maxX) maxX = lxx;
		                if (lyy > maxY) maxY = lyy;
		                if (lxx < minX) minX = lxx;
		                if (lyy < minY) minY = lyy;
		                //dc.moveTo(cx, cy);
		                cx = Math.round(lxx / zx);
		                cy = Math.round(lyy / zy);
		                dc.lineTo(cx, cy);
		                lss = line.speed ? line.speed : lss;
		            }
		        }
		        catch (e) {
		            ln.add(".error");
		            pr.add(".error");
		            //WS.Body.state = "error";
		            throw e;
		        }
		        dl.innerHTML = "Max X: " + maxX + " Max Y: " + maxY + " Min X: " + minX + " Min Y: " + minY + " Size X: " + (maxY - minY) + " Size Y: " + (maxY - minX);
		        dc.closePath();
		        dc.stroke();
		        //WS.Body.state = "ready";
		    };

		    CNC.ShowCoord = function(line, cname, obj) {
		        var div = DOM.div(".code-elem." + cname + "-coord");
		        var c = line[cname];
		        if (isNaN(parseInt(c))) {
		            c = obj[cname];
		            line[cname] = c;
		            div.add(".from-history");
		            div.set(null, "(" + c + ")");
		        }
		        else {
		            div.set(null, c);
		        }
		        return div;
		    };

		    CNC.RunProgram = function() {
		        var text = DOM("#programText").value.split("\n");
		        var ln = DOM("#progLineNums");
		        ln.innerHTML = "";
		        for (var i = 1; i <= text.length; i++) {
		            ln.div(".line-num", i).add("@num", i);
		        }
		        if (CNC.ProgramCode) {
		            CNC.SendProgram(JSON.stringify(CNC.ProgramCode));
		        }
		    };

		    CNC.QuickCommand = function(txt) {
		        var lxx = parseInt(CNC.State.X);
		        var lyy = parseInt(CNC.State.Y);
		        var lzz = parseInt(CNC.State.Z);

		        txt = txt.trim();
		        if (txt.length == 0) return;
		        var txt = txt.split(" ");
		        if (txt[0] == "Z") {
		            var speed = 0;
		            if (txt[2]) speed = parseParam(txt[2], 0, 0);
		            var obj = { command: CNC.GCommands[txt[0]], x: lxx, y: lyy, z: parseParam(txt[1], lzz, lzz), speed: speed };
		        }
		        if (txt[0] == "G") {
		            lxx = parseParam(txt[1], 0, lxx);
		            lyy = parseParam(txt[2], 0, lyy);
		            var speed = 0;
		            if (txt.length >= 5) {
		                lzz = parseParam(txt[3], 0, lzz);
		                speed = parseParam(txt[4], 0, 0);
		            }
		            else {
		                if (txt[3]) speed = parseParam(txt[3], 0, 0);
		            }
		            var obj = { command: CNC.GCommands[txt[0]], x: lxx, y: lyy, z: lzz, speed: speed };
		        }
		        if (txt[0] == "R") {
		            var obj = { command: CNC.GCommands[txt[0]], x: parseParam(txt[1], 0, lxx), y: parseParam(txt[2], 0, lyy), z: parseParam(txt[3], 0, lzz) };
		        }
		        if (obj) {
		            CNC.Command(obj);
		        }
		    };

		    WS.DOMload(CNC.Init); 
		</script>
		<style type='text/css'>
		    
#ContentPanel
{
	height: 80%;
}
#LogBar
{
	display: block;
	font-family: monospace;
	font-size: 12px;
	padding: 2px;
	text-align: left;
	width: 50%;
	height: 100%;
	overflow-y: scroll;
	float: left;
}
#LogBar .log-item
{
	clear: both;
}
body[state='Running'] #StatusBar
{
	background-color: #CCFFAA;
}
body[state='Paused'] #StatusBar
{
	background-color: #FFEECC;
}
body[state='Aborted'] #StatusBar
{
	background-color: #FFD0FF;
}
body[state='Completed'] #StatusBar
{
	background-color: #CCEEFF;
}
.toolbar .menuitem.run
{

}
body[state='ready'] .menuitem.run
{
	display: block;
}
#StatusBar
{
	font-size: 45px;
	color: #aaa;
}
#StatusBar .sbar-elem
{
	display: inline-block;
	padding: 0px 10px;
}
#StatusBar .coord span, #StatusBar .program-state span
{
	padding-left: 20px;
}
#StatusBar .program-state span
{
	color: black;
}
div.x-coord
{
	color: blue;
}
div.y-coord
{
	color: darkmagenta;
}
div.z-coord
{
	color: green;
}
div.speed
{
	color: darkorange;
}
div.command
{
	color: navy;
	font-weight: bold;
}
#Program
{
	width: 49%;
	font-size: 14px;
	font-family: monospace;
	height: 100%;
	float: left;
}
.line-numbers
{
	width: 30px;
	float: left;
	text-align: right;
	padding-right: 5px;
	color: #aaa;
	font-weight: bold;
}

.line-numbers .line-num.error
{
	color: red;
}

#Program textarea
{
	height: 100%;
	border: none;
	float: left;
	border: solid 1px gray;
	width: 300px;
}
#ProgramResult
{
	width: 280px;
	float: left;
	text-align: left;
}
#ProgramResult.error
{
	border-top: solid 8px red;
}

#ProgramResult .prog-line.error
{
	background-color: red;
}

#ProgramResult .prog-line.warning
{
	background-color: darkorange;
}

#ProgramResult .code-elem
{
	display: inline-block;
	padding-right: 10px;
	text-align: left;
	min-width: 40px;
}
#ProgramResult .code-elem.command
{
	width: 15px;
	min-width: 15px;
}
body.busy .menuitem
{
	display: none;
}
#prewiewer
{
	border: solid 1px gray;
	background-color: black;
	float: right;
}


#ProgramLog 
{
	width: 200px;
	float: left;
	text-align: left;
	padding: 0px 10px;
	color: #aaa;
}

#ProgramLog .log.error
{
	color: red;
}


#ProgramLog .log:hover{
	color: black;	
}

#ProgramLog .log .item
{
	display:inline-block;
	padding: 0px 3px;
}


		</style>
	</head>
	<body class="">
		<include url='http://Services.web-manufacture.net/UI/Toolbars.htm'></include>
		
		<include url='http://Services.web-manufacture.net/UI/UiUtils.htm'></include>
		<div id='Toolbar' class='toolbar'>
			<div class='menuitem run' icon="http://cdn1.iconfinder.com/data/icons/realistiK-new/48x48/devices/memory.png"
			onclick="CNC.RunProgram()">
				Run</div>
			<div class='menuitem debug' icon='http://cdn1.iconfinder.com/data/icons/WPZOOM_Developer_Icon_Set/48/bug.png'
			onclick="CNC.SetDebugMode()">
				Debug</div>
			<div class='menuitem pause' onclick="CNC.ProgCommand('pause');">
				Pause</div>
			<div class='menuitem resume' onclick="CNC.ProgCommand('resume');">
				Resume</div>
			<div class='menuitem stop' icon='http://cdn5.iconfinder.com/data/icons/48_px_web_icons/48/Signal_stop.png'
			onclick="CNC.Command({command:3});">
				Stop</div>
			<div class='separator'>
			</div>
			<div class='menuitem' icon='http://cdn2.iconfinder.com/data/icons/gnomeicontheme/32x32/actions/redhat-home.png' onclick="CNC.Go(0, 0, 0)">
				park</div>
			<div class='separator'>
			</div>
			<div class='menuitem' onclick="CNC.ShowProgram()" icon="http://cdn4.iconfinder.com/data/icons/gnome-desktop-icons-png/PNG/48/Gnome-System-Run-48.png">
				compile</div>
			
			<div class='separator'>
			</div>
			<input class='toolbar-input' type="text" id='quickCommand'/>
			<div class='menuitem' icon='http://cdn1.iconfinder.com/data/icons/snowish/48x48/actions/forward.png' onclick="CNC.QuickCommand(DOM('#quickCommand').value);">Quick</div>
		</div>
		<div id='ContentPanel'>
			<div id='StatusBar'>
				<div class='sbar-elem command line program-state' style='font-size: 20px; color: gray'>
					(<span id='progLine'></span>)
				</div>
				<div class='sbar-elem last-command program-state'>
					<span id='progCommand'></span>
				</div>
				<div class='sbar-elem x-coord coord'>
					x<span id="xCoord" class=' '></span>
				</div>
				<div class='sbar-elem y-coord coord'>
					y<span id="yCoord" class=''></span>
				</div>
				<div class='sbar-elem z-coord coord'>
					z<span id="zCoord" class=''></span>
				</div>
			</div>
			<div id='Program'>				
				<div id='progLineNums' class="line-numbers">
					<div class="line-num" num='1'>1	</div>
				</div>
				<textarea id='programText'></textarea>
				<div id='codeLineNums' class="line-numbers">
					<div class="line-num" num='1'>1</div>
				</div>
				<div id='ProgramResult'>
				</div>
				<div id='ProgramLog'>
				</div>
			</div>
			<canvas id="prewiewer" width="600" height="600"></canvas>
		</div>
	</body>
</html>
